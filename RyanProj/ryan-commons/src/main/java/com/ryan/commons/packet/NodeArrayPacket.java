/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ryan.commons.packet;

import org.apache.thrift.TException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.*;

/**
 * 结点测点列表信息
 */
public class NodeArrayPacket implements org.apache.thrift.TBase<NodeArrayPacket, NodeArrayPacket._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NodeArrayPacket");

  private static final org.apache.thrift.protocol.TField NODE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeList", org.apache.thrift.protocol.TType.LIST, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new NodeArrayPacketStandardSchemeFactory());
    schemes.put(TupleScheme.class, new NodeArrayPacketTupleSchemeFactory());
  }

  /**
   * 结点列表，批量发送时使用
   */
  public List<NodePacket> nodeList; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 结点列表，批量发送时使用
     */
    NODE_LIST((short)1, "nodeList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NODE_LIST
          return NODE_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.NODE_LIST};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NODE_LIST, new org.apache.thrift.meta_data.FieldMetaData("nodeList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NodePacket.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NodeArrayPacket.class, metaDataMap);
  }

  public NodeArrayPacket() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NodeArrayPacket(NodeArrayPacket other) {
    if (other.isSetNodeList()) {
      List<NodePacket> __this__nodeList = new ArrayList<NodePacket>();
      for (NodePacket other_element : other.nodeList) {
        __this__nodeList.add(new NodePacket(other_element));
      }
      this.nodeList = __this__nodeList;
    }
  }

  public NodeArrayPacket deepCopy() {
    return new NodeArrayPacket(this);
  }

  @Override
  public void clear() {
    this.nodeList = null;
  }

  public int getNodeListSize() {
    return (this.nodeList == null) ? 0 : this.nodeList.size();
  }

  public java.util.Iterator<NodePacket> getNodeListIterator() {
    return (this.nodeList == null) ? null : this.nodeList.iterator();
  }

  public void addToNodeList(NodePacket elem) {
    if (this.nodeList == null) {
      this.nodeList = new ArrayList<NodePacket>();
    }
    this.nodeList.add(elem);
  }

  /**
   * 结点列表，批量发送时使用
   */
  public List<NodePacket> getNodeList() {
    return this.nodeList;
  }

  /**
   * 结点列表，批量发送时使用
   */
  public NodeArrayPacket setNodeList(List<NodePacket> nodeList) {
    this.nodeList = nodeList;
    return this;
  }

  public void unsetNodeList() {
    this.nodeList = null;
  }

  /** Returns true if field nodeList is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeList() {
    return this.nodeList != null;
  }

  public void setNodeListIsSet(boolean value) {
    if (!value) {
      this.nodeList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NODE_LIST:
      if (value == null) {
        unsetNodeList();
      } else {
        setNodeList((List<NodePacket>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NODE_LIST:
      return getNodeList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NODE_LIST:
      return isSetNodeList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NodeArrayPacket)
      return this.equals((NodeArrayPacket)that);
    return false;
  }

  public boolean equals(NodeArrayPacket that) {
    if (that == null)
      return false;

    boolean this_present_nodeList = true && this.isSetNodeList();
    boolean that_present_nodeList = true && that.isSetNodeList();
    if (this_present_nodeList || that_present_nodeList) {
      if (!(this_present_nodeList && that_present_nodeList))
        return false;
      if (!this.nodeList.equals(that.nodeList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(NodeArrayPacket other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    NodeArrayPacket typedOther = (NodeArrayPacket)other;

    lastComparison = Boolean.valueOf(isSetNodeList()).compareTo(typedOther.isSetNodeList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeList, typedOther.nodeList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("NodeArrayPacket(");
    boolean first = true;

    if (isSetNodeList()) {
      sb.append("nodeList:");
      if (this.nodeList == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeList);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NodeArrayPacketStandardSchemeFactory implements SchemeFactory {
    public NodeArrayPacketStandardScheme getScheme() {
      return new NodeArrayPacketStandardScheme();
    }
  }

  private static class NodeArrayPacketStandardScheme extends StandardScheme<NodeArrayPacket> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NodeArrayPacket struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // NODE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                struct.nodeList = new ArrayList<NodePacket>(_list18.size);
                for (int _i19 = 0; _i19 < _list18.size; ++_i19)
                {
                  NodePacket _elem20; // required
                  _elem20 = new NodePacket();
                  _elem20.read(iprot);
                  struct.nodeList.add(_elem20);
                }
                iprot.readListEnd();
              }
              struct.setNodeListIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NodeArrayPacket struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.nodeList != null) {
        if (struct.isSetNodeList()) {
          oprot.writeFieldBegin(NODE_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.nodeList.size()));
            for (NodePacket _iter21 : struct.nodeList)
            {
              _iter21.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NodeArrayPacketTupleSchemeFactory implements SchemeFactory {
    public NodeArrayPacketTupleScheme getScheme() {
      return new NodeArrayPacketTupleScheme();
    }
  }

  private static class NodeArrayPacketTupleScheme extends TupleScheme<NodeArrayPacket> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NodeArrayPacket struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetNodeList()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetNodeList()) {
        {
          oprot.writeI32(struct.nodeList.size());
          for (NodePacket _iter22 : struct.nodeList)
          {
            _iter22.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NodeArrayPacket struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.nodeList = new ArrayList<NodePacket>(_list23.size);
          for (int _i24 = 0; _i24 < _list23.size; ++_i24)
          {
            NodePacket _elem25; // required
            _elem25 = new NodePacket();
            _elem25.read(iprot);
            struct.nodeList.add(_elem25);
          }
        }
        struct.setNodeListIsSet(true);
      }
    }
  }

}

