/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ryan.commons.packet;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.*;

/**
 * 结点测点信息
 */
public class NodePacket implements org.apache.thrift.TBase<NodePacket, NodePacket._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NodePacket");

  private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TAGID_FIELD_DESC = new org.apache.thrift.protocol.TField("tagid", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("desc", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CREATEDTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createdtime", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField MODIFIEDTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("modifiedtime", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField PROP_FIELD_DESC = new org.apache.thrift.protocol.TField("prop", org.apache.thrift.protocol.TType.MAP, (short)10);
  private static final org.apache.thrift.protocol.TField OPER_FIELD_DESC = new org.apache.thrift.protocol.TField("oper", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new NodePacketStandardSchemeFactory());
    schemes.put(TupleScheme.class, new NodePacketTupleSchemeFactory());
  }

  /**
   * 结点测点所在的报警源ip地址
   */
  public String ip; // optional
  /**
   * 结点测点编号
   */
  public int tagid; // optional
  /**
   * 结点测点名称
   */
  public String name; // optional
  /**
   * 结点测点的描述
   */
  public String desc; // optional
  /**
   * 结点测点类型（结点，模拟量测点，开关量测点，字符串测点）
   */
  public int type; // optional
  /**
   * 父结点编号
   */
  public int parentId; // optional
  /**
   * 结点测点的路径
   */
  public String path; // optional
  /**
   * 结点测点的创建时间
   */
  public long createdtime; // optional
  /**
   * 最近一次更新结点测点的时间
   */
  public long modifiedtime; // optional
  /**
   * 结点测点属性，结点测点的类型不同，属性的数量也不同，通过SDK获得，属性内容见结点测点属性，所有属性值都转换成string类型，数据传递到报警中心后处理
   */
  public Map<String,String> prop; // optional
  /**
   * 数据的操作类型（增加，更新，删除）
   */
  public String oper; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 结点测点所在的报警源ip地址
     */
    IP((short)1, "ip"),
    /**
     * 结点测点编号
     */
    TAGID((short)2, "tagid"),
    /**
     * 结点测点名称
     */
    NAME((short)3, "name"),
    /**
     * 结点测点的描述
     */
    DESC((short)4, "desc"),
    /**
     * 结点测点类型（结点，模拟量测点，开关量测点，字符串测点）
     */
    TYPE((short)5, "type"),
    /**
     * 父结点编号
     */
    PARENT_ID((short)6, "parentId"),
    /**
     * 结点测点的路径
     */
    PATH((short)7, "path"),
    /**
     * 结点测点的创建时间
     */
    CREATEDTIME((short)8, "createdtime"),
    /**
     * 最近一次更新结点测点的时间
     */
    MODIFIEDTIME((short)9, "modifiedtime"),
    /**
     * 结点测点属性，结点测点的类型不同，属性的数量也不同，通过SDK获得，属性内容见结点测点属性，所有属性值都转换成string类型，数据传递到报警中心后处理
     */
    PROP((short)10, "prop"),
    /**
     * 数据的操作类型（增加，更新，删除）
     */
    OPER((short)11, "oper");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IP
          return IP;
        case 2: // TAGID
          return TAGID;
        case 3: // NAME
          return NAME;
        case 4: // DESC
          return DESC;
        case 5: // TYPE
          return TYPE;
        case 6: // PARENT_ID
          return PARENT_ID;
        case 7: // PATH
          return PATH;
        case 8: // CREATEDTIME
          return CREATEDTIME;
        case 9: // MODIFIEDTIME
          return MODIFIEDTIME;
        case 10: // PROP
          return PROP;
        case 11: // OPER
          return OPER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TAGID_ISSET_ID = 0;
  private static final int __TYPE_ISSET_ID = 1;
  private static final int __PARENTID_ISSET_ID = 2;
  private static final int __CREATEDTIME_ISSET_ID = 3;
  private static final int __MODIFIEDTIME_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.IP, _Fields.TAGID, _Fields.NAME, _Fields.DESC, _Fields.TYPE, _Fields.PARENT_ID, _Fields.PATH, _Fields.CREATEDTIME, _Fields.MODIFIEDTIME, _Fields.PROP, _Fields.OPER};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAGID, new org.apache.thrift.meta_data.FieldMetaData("tagid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESC, new org.apache.thrift.meta_data.FieldMetaData("desc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("parentId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATEDTIME, new org.apache.thrift.meta_data.FieldMetaData("createdtime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MODIFIEDTIME, new org.apache.thrift.meta_data.FieldMetaData("modifiedtime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PROP, new org.apache.thrift.meta_data.FieldMetaData("prop", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.OPER, new org.apache.thrift.meta_data.FieldMetaData("oper", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NodePacket.class, metaDataMap);
  }

  public NodePacket() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NodePacket(NodePacket other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetIp()) {
      this.ip = other.ip;
    }
    this.tagid = other.tagid;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetDesc()) {
      this.desc = other.desc;
    }
    this.type = other.type;
    this.parentId = other.parentId;
    if (other.isSetPath()) {
      this.path = other.path;
    }
    this.createdtime = other.createdtime;
    this.modifiedtime = other.modifiedtime;
    if (other.isSetProp()) {
      Map<String,String> __this__prop = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.prop.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__prop_copy_key = other_element_key;

        String __this__prop_copy_value = other_element_value;

        __this__prop.put(__this__prop_copy_key, __this__prop_copy_value);
      }
      this.prop = __this__prop;
    }
    if (other.isSetOper()) {
      this.oper = other.oper;
    }
  }

  public NodePacket deepCopy() {
    return new NodePacket(this);
  }

  @Override
  public void clear() {
    this.ip = null;
    setTagidIsSet(false);
    this.tagid = 0;
    this.name = null;
    this.desc = null;
    setTypeIsSet(false);
    this.type = 0;
    setParentIdIsSet(false);
    this.parentId = 0;
    this.path = null;
    setCreatedtimeIsSet(false);
    this.createdtime = 0;
    setModifiedtimeIsSet(false);
    this.modifiedtime = 0;
    this.prop = null;
    this.oper = null;
  }

  /**
   * 结点测点所在的报警源ip地址
   */
  public String getIp() {
    return this.ip;
  }

  /**
   * 结点测点所在的报警源ip地址
   */
  public NodePacket setIp(String ip) {
    this.ip = ip;
    return this;
  }

  public void unsetIp() {
    this.ip = null;
  }

  /** Returns true if field ip is set (has been assigned a value) and false otherwise */
  public boolean isSetIp() {
    return this.ip != null;
  }

  public void setIpIsSet(boolean value) {
    if (!value) {
      this.ip = null;
    }
  }

  /**
   * 结点测点编号
   */
  public int getTagid() {
    return this.tagid;
  }

  /**
   * 结点测点编号
   */
  public NodePacket setTagid(int tagid) {
    this.tagid = tagid;
    setTagidIsSet(true);
    return this;
  }

  public void unsetTagid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TAGID_ISSET_ID);
  }

  /** Returns true if field tagid is set (has been assigned a value) and false otherwise */
  public boolean isSetTagid() {
    return EncodingUtils.testBit(__isset_bitfield, __TAGID_ISSET_ID);
  }

  public void setTagidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TAGID_ISSET_ID, value);
  }

  /**
   * 结点测点名称
   */
  public String getName() {
    return this.name;
  }

  /**
   * 结点测点名称
   */
  public NodePacket setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  /**
   * 结点测点的描述
   */
  public String getDesc() {
    return this.desc;
  }

  /**
   * 结点测点的描述
   */
  public NodePacket setDesc(String desc) {
    this.desc = desc;
    return this;
  }

  public void unsetDesc() {
    this.desc = null;
  }

  /** Returns true if field desc is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc() {
    return this.desc != null;
  }

  public void setDescIsSet(boolean value) {
    if (!value) {
      this.desc = null;
    }
  }

  /**
   * 结点测点类型（结点，模拟量测点，开关量测点，字符串测点）
   */
  public int getType() {
    return this.type;
  }

  /**
   * 结点测点类型（结点，模拟量测点，开关量测点，字符串测点）
   */
  public NodePacket setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  /**
   * 父结点编号
   */
  public int getParentId() {
    return this.parentId;
  }

  /**
   * 父结点编号
   */
  public NodePacket setParentId(int parentId) {
    this.parentId = parentId;
    setParentIdIsSet(true);
    return this;
  }

  public void unsetParentId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARENTID_ISSET_ID);
  }

  /** Returns true if field parentId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentId() {
    return EncodingUtils.testBit(__isset_bitfield, __PARENTID_ISSET_ID);
  }

  public void setParentIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARENTID_ISSET_ID, value);
  }

  /**
   * 结点测点的路径
   */
  public String getPath() {
    return this.path;
  }

  /**
   * 结点测点的路径
   */
  public NodePacket setPath(String path) {
    this.path = path;
    return this;
  }

  public void unsetPath() {
    this.path = null;
  }

  /** Returns true if field path is set (has been assigned a value) and false otherwise */
  public boolean isSetPath() {
    return this.path != null;
  }

  public void setPathIsSet(boolean value) {
    if (!value) {
      this.path = null;
    }
  }

  /**
   * 结点测点的创建时间
   */
  public long getCreatedtime() {
    return this.createdtime;
  }

  /**
   * 结点测点的创建时间
   */
  public NodePacket setCreatedtime(long createdtime) {
    this.createdtime = createdtime;
    setCreatedtimeIsSet(true);
    return this;
  }

  public void unsetCreatedtime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATEDTIME_ISSET_ID);
  }

  /** Returns true if field createdtime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedtime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATEDTIME_ISSET_ID);
  }

  public void setCreatedtimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATEDTIME_ISSET_ID, value);
  }

  /**
   * 最近一次更新结点测点的时间
   */
  public long getModifiedtime() {
    return this.modifiedtime;
  }

  /**
   * 最近一次更新结点测点的时间
   */
  public NodePacket setModifiedtime(long modifiedtime) {
    this.modifiedtime = modifiedtime;
    setModifiedtimeIsSet(true);
    return this;
  }

  public void unsetModifiedtime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODIFIEDTIME_ISSET_ID);
  }

  /** Returns true if field modifiedtime is set (has been assigned a value) and false otherwise */
  public boolean isSetModifiedtime() {
    return EncodingUtils.testBit(__isset_bitfield, __MODIFIEDTIME_ISSET_ID);
  }

  public void setModifiedtimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODIFIEDTIME_ISSET_ID, value);
  }

  public int getPropSize() {
    return (this.prop == null) ? 0 : this.prop.size();
  }

  public void putToProp(String key, String val) {
    if (this.prop == null) {
      this.prop = new HashMap<String,String>();
    }
    this.prop.put(key, val);
  }

  /**
   * 结点测点属性，结点测点的类型不同，属性的数量也不同，通过SDK获得，属性内容见结点测点属性，所有属性值都转换成string类型，数据传递到报警中心后处理
   */
  public Map<String,String> getProp() {
    return this.prop;
  }

  /**
   * 结点测点属性，结点测点的类型不同，属性的数量也不同，通过SDK获得，属性内容见结点测点属性，所有属性值都转换成string类型，数据传递到报警中心后处理
   */
  public NodePacket setProp(Map<String,String> prop) {
    this.prop = prop;
    return this;
  }

  public void unsetProp() {
    this.prop = null;
  }

  /** Returns true if field prop is set (has been assigned a value) and false otherwise */
  public boolean isSetProp() {
    return this.prop != null;
  }

  public void setPropIsSet(boolean value) {
    if (!value) {
      this.prop = null;
    }
  }

  /**
   * 数据的操作类型（增加，更新，删除）
   */
  public String getOper() {
    return this.oper;
  }

  /**
   * 数据的操作类型（增加，更新，删除）
   */
  public NodePacket setOper(String oper) {
    this.oper = oper;
    return this;
  }

  public void unsetOper() {
    this.oper = null;
  }

  /** Returns true if field oper is set (has been assigned a value) and false otherwise */
  public boolean isSetOper() {
    return this.oper != null;
  }

  public void setOperIsSet(boolean value) {
    if (!value) {
      this.oper = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IP:
      if (value == null) {
        unsetIp();
      } else {
        setIp((String)value);
      }
      break;

    case TAGID:
      if (value == null) {
        unsetTagid();
      } else {
        setTagid((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case DESC:
      if (value == null) {
        unsetDesc();
      } else {
        setDesc((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    case PARENT_ID:
      if (value == null) {
        unsetParentId();
      } else {
        setParentId((Integer)value);
      }
      break;

    case PATH:
      if (value == null) {
        unsetPath();
      } else {
        setPath((String)value);
      }
      break;

    case CREATEDTIME:
      if (value == null) {
        unsetCreatedtime();
      } else {
        setCreatedtime((Long)value);
      }
      break;

    case MODIFIEDTIME:
      if (value == null) {
        unsetModifiedtime();
      } else {
        setModifiedtime((Long)value);
      }
      break;

    case PROP:
      if (value == null) {
        unsetProp();
      } else {
        setProp((Map<String,String>)value);
      }
      break;

    case OPER:
      if (value == null) {
        unsetOper();
      } else {
        setOper((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IP:
      return getIp();

    case TAGID:
      return Integer.valueOf(getTagid());

    case NAME:
      return getName();

    case DESC:
      return getDesc();

    case TYPE:
      return Integer.valueOf(getType());

    case PARENT_ID:
      return Integer.valueOf(getParentId());

    case PATH:
      return getPath();

    case CREATEDTIME:
      return Long.valueOf(getCreatedtime());

    case MODIFIEDTIME:
      return Long.valueOf(getModifiedtime());

    case PROP:
      return getProp();

    case OPER:
      return getOper();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IP:
      return isSetIp();
    case TAGID:
      return isSetTagid();
    case NAME:
      return isSetName();
    case DESC:
      return isSetDesc();
    case TYPE:
      return isSetType();
    case PARENT_ID:
      return isSetParentId();
    case PATH:
      return isSetPath();
    case CREATEDTIME:
      return isSetCreatedtime();
    case MODIFIEDTIME:
      return isSetModifiedtime();
    case PROP:
      return isSetProp();
    case OPER:
      return isSetOper();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NodePacket)
      return this.equals((NodePacket)that);
    return false;
  }

  public boolean equals(NodePacket that) {
    if (that == null)
      return false;

    boolean this_present_ip = true && this.isSetIp();
    boolean that_present_ip = true && that.isSetIp();
    if (this_present_ip || that_present_ip) {
      if (!(this_present_ip && that_present_ip))
        return false;
      if (!this.ip.equals(that.ip))
        return false;
    }

    boolean this_present_tagid = true && this.isSetTagid();
    boolean that_present_tagid = true && that.isSetTagid();
    if (this_present_tagid || that_present_tagid) {
      if (!(this_present_tagid && that_present_tagid))
        return false;
      if (this.tagid != that.tagid)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_desc = true && this.isSetDesc();
    boolean that_present_desc = true && that.isSetDesc();
    if (this_present_desc || that_present_desc) {
      if (!(this_present_desc && that_present_desc))
        return false;
      if (!this.desc.equals(that.desc))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_parentId = true && this.isSetParentId();
    boolean that_present_parentId = true && that.isSetParentId();
    if (this_present_parentId || that_present_parentId) {
      if (!(this_present_parentId && that_present_parentId))
        return false;
      if (this.parentId != that.parentId)
        return false;
    }

    boolean this_present_path = true && this.isSetPath();
    boolean that_present_path = true && that.isSetPath();
    if (this_present_path || that_present_path) {
      if (!(this_present_path && that_present_path))
        return false;
      if (!this.path.equals(that.path))
        return false;
    }

    boolean this_present_createdtime = true && this.isSetCreatedtime();
    boolean that_present_createdtime = true && that.isSetCreatedtime();
    if (this_present_createdtime || that_present_createdtime) {
      if (!(this_present_createdtime && that_present_createdtime))
        return false;
      if (this.createdtime != that.createdtime)
        return false;
    }

    boolean this_present_modifiedtime = true && this.isSetModifiedtime();
    boolean that_present_modifiedtime = true && that.isSetModifiedtime();
    if (this_present_modifiedtime || that_present_modifiedtime) {
      if (!(this_present_modifiedtime && that_present_modifiedtime))
        return false;
      if (this.modifiedtime != that.modifiedtime)
        return false;
    }

    boolean this_present_prop = true && this.isSetProp();
    boolean that_present_prop = true && that.isSetProp();
    if (this_present_prop || that_present_prop) {
      if (!(this_present_prop && that_present_prop))
        return false;
      if (!this.prop.equals(that.prop))
        return false;
    }

    boolean this_present_oper = true && this.isSetOper();
    boolean that_present_oper = true && that.isSetOper();
    if (this_present_oper || that_present_oper) {
      if (!(this_present_oper && that_present_oper))
        return false;
      if (!this.oper.equals(that.oper))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(NodePacket other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    NodePacket typedOther = (NodePacket)other;

    lastComparison = Boolean.valueOf(isSetIp()).compareTo(typedOther.isSetIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, typedOther.ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTagid()).compareTo(typedOther.isSetTagid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTagid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagid, typedOther.tagid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc()).compareTo(typedOther.isSetDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc, typedOther.desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentId()).compareTo(typedOther.isSetParentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentId, typedOther.parentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPath()).compareTo(typedOther.isSetPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, typedOther.path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatedtime()).compareTo(typedOther.isSetCreatedtime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedtime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdtime, typedOther.createdtime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModifiedtime()).compareTo(typedOther.isSetModifiedtime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModifiedtime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modifiedtime, typedOther.modifiedtime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProp()).compareTo(typedOther.isSetProp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prop, typedOther.prop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOper()).compareTo(typedOther.isSetOper());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOper()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oper, typedOther.oper);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("NodePacket(");
    boolean first = true;

    if (isSetIp()) {
      sb.append("ip:");
      if (this.ip == null) {
        sb.append("null");
      } else {
        sb.append(this.ip);
      }
      first = false;
    }
    if (isSetTagid()) {
      if (!first) sb.append(", ");
      sb.append("tagid:");
      sb.append(this.tagid);
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetDesc()) {
      if (!first) sb.append(", ");
      sb.append("desc:");
      if (this.desc == null) {
        sb.append("null");
      } else {
        sb.append(this.desc);
      }
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
    }
    if (isSetParentId()) {
      if (!first) sb.append(", ");
      sb.append("parentId:");
      sb.append(this.parentId);
      first = false;
    }
    if (isSetPath()) {
      if (!first) sb.append(", ");
      sb.append("path:");
      if (this.path == null) {
        sb.append("null");
      } else {
        sb.append(this.path);
      }
      first = false;
    }
    if (isSetCreatedtime()) {
      if (!first) sb.append(", ");
      sb.append("createdtime:");
      sb.append(this.createdtime);
      first = false;
    }
    if (isSetModifiedtime()) {
      if (!first) sb.append(", ");
      sb.append("modifiedtime:");
      sb.append(this.modifiedtime);
      first = false;
    }
    if (isSetProp()) {
      if (!first) sb.append(", ");
      sb.append("prop:");
      if (this.prop == null) {
        sb.append("null");
      } else {
        sb.append(this.prop);
      }
      first = false;
    }
    if (isSetOper()) {
      if (!first) sb.append(", ");
      sb.append("oper:");
      if (this.oper == null) {
        sb.append("null");
      } else {
        sb.append(this.oper);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NodePacketStandardSchemeFactory implements SchemeFactory {
    public NodePacketStandardScheme getScheme() {
      return new NodePacketStandardScheme();
    }
  }

  private static class NodePacketStandardScheme extends StandardScheme<NodePacket> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NodePacket struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ip = iprot.readString();
              struct.setIpIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TAGID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tagid = iprot.readI32();
              struct.setTagidIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.desc = iprot.readString();
              struct.setDescIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PARENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.parentId = iprot.readI32();
              struct.setParentIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.path = iprot.readString();
              struct.setPathIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREATEDTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createdtime = iprot.readI64();
              struct.setCreatedtimeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MODIFIEDTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.modifiedtime = iprot.readI64();
              struct.setModifiedtimeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PROP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                struct.prop = new HashMap<String,String>(2*_map8.size);
                for (int _i9 = 0; _i9 < _map8.size; ++_i9)
                {
                  String _key10; // required
                  String _val11; // required
                  _key10 = iprot.readString();
                  _val11 = iprot.readString();
                  struct.prop.put(_key10, _val11);
                }
                iprot.readMapEnd();
              }
              struct.setPropIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // OPER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.oper = iprot.readString();
              struct.setOperIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NodePacket struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ip != null) {
        if (struct.isSetIp()) {
          oprot.writeFieldBegin(IP_FIELD_DESC);
          oprot.writeString(struct.ip);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTagid()) {
        oprot.writeFieldBegin(TAGID_FIELD_DESC);
        oprot.writeI32(struct.tagid);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.desc != null) {
        if (struct.isSetDesc()) {
          oprot.writeFieldBegin(DESC_FIELD_DESC);
          oprot.writeString(struct.desc);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetType()) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.isSetParentId()) {
        oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
        oprot.writeI32(struct.parentId);
        oprot.writeFieldEnd();
      }
      if (struct.path != null) {
        if (struct.isSetPath()) {
          oprot.writeFieldBegin(PATH_FIELD_DESC);
          oprot.writeString(struct.path);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCreatedtime()) {
        oprot.writeFieldBegin(CREATEDTIME_FIELD_DESC);
        oprot.writeI64(struct.createdtime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetModifiedtime()) {
        oprot.writeFieldBegin(MODIFIEDTIME_FIELD_DESC);
        oprot.writeI64(struct.modifiedtime);
        oprot.writeFieldEnd();
      }
      if (struct.prop != null) {
        if (struct.isSetProp()) {
          oprot.writeFieldBegin(PROP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.prop.size()));
            for (Map.Entry<String, String> _iter12 : struct.prop.entrySet())
            {
              oprot.writeString(_iter12.getKey());
              oprot.writeString(_iter12.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.oper != null) {
        if (struct.isSetOper()) {
          oprot.writeFieldBegin(OPER_FIELD_DESC);
          oprot.writeString(struct.oper);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NodePacketTupleSchemeFactory implements SchemeFactory {
    public NodePacketTupleScheme getScheme() {
      return new NodePacketTupleScheme();
    }
  }

  private static class NodePacketTupleScheme extends TupleScheme<NodePacket> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NodePacket struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetIp()) {
        optionals.set(0);
      }
      if (struct.isSetTagid()) {
        optionals.set(1);
      }
      if (struct.isSetName()) {
        optionals.set(2);
      }
      if (struct.isSetDesc()) {
        optionals.set(3);
      }
      if (struct.isSetType()) {
        optionals.set(4);
      }
      if (struct.isSetParentId()) {
        optionals.set(5);
      }
      if (struct.isSetPath()) {
        optionals.set(6);
      }
      if (struct.isSetCreatedtime()) {
        optionals.set(7);
      }
      if (struct.isSetModifiedtime()) {
        optionals.set(8);
      }
      if (struct.isSetProp()) {
        optionals.set(9);
      }
      if (struct.isSetOper()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetIp()) {
        oprot.writeString(struct.ip);
      }
      if (struct.isSetTagid()) {
        oprot.writeI32(struct.tagid);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetDesc()) {
        oprot.writeString(struct.desc);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type);
      }
      if (struct.isSetParentId()) {
        oprot.writeI32(struct.parentId);
      }
      if (struct.isSetPath()) {
        oprot.writeString(struct.path);
      }
      if (struct.isSetCreatedtime()) {
        oprot.writeI64(struct.createdtime);
      }
      if (struct.isSetModifiedtime()) {
        oprot.writeI64(struct.modifiedtime);
      }
      if (struct.isSetProp()) {
        {
          oprot.writeI32(struct.prop.size());
          for (Map.Entry<String, String> _iter13 : struct.prop.entrySet())
          {
            oprot.writeString(_iter13.getKey());
            oprot.writeString(_iter13.getValue());
          }
        }
      }
      if (struct.isSetOper()) {
        oprot.writeString(struct.oper);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NodePacket struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.ip = iprot.readString();
        struct.setIpIsSet(true);
      }
      if (incoming.get(1)) {
        struct.tagid = iprot.readI32();
        struct.setTagidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.desc = iprot.readString();
        struct.setDescIsSet(true);
      }
      if (incoming.get(4)) {
        struct.type = iprot.readI32();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.parentId = iprot.readI32();
        struct.setParentIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.path = iprot.readString();
        struct.setPathIsSet(true);
      }
      if (incoming.get(7)) {
        struct.createdtime = iprot.readI64();
        struct.setCreatedtimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.modifiedtime = iprot.readI64();
        struct.setModifiedtimeIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TMap _map14 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.prop = new HashMap<String,String>(2*_map14.size);
          for (int _i15 = 0; _i15 < _map14.size; ++_i15)
          {
            String _key16; // required
            String _val17; // required
            _key16 = iprot.readString();
            _val17 = iprot.readString();
            struct.prop.put(_key16, _val17);
          }
        }
        struct.setPropIsSet(true);
      }
      if (incoming.get(10)) {
        struct.oper = iprot.readString();
        struct.setOperIsSet(true);
      }
    }
  }

}

