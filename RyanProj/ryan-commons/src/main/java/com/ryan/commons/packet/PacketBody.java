/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ryan.commons.packet;

import org.apache.thrift.TException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.*;

/**
 * 消息包体x
 */
public class PacketBody implements org.apache.thrift.TBase<PacketBody, PacketBody._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PacketBody");

  private static final org.apache.thrift.protocol.TField AS_PACKET_FIELD_DESC = new org.apache.thrift.protocol.TField("asPacket", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField NODE_PACKET_FIELD_DESC = new org.apache.thrift.protocol.TField("nodePacket", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField NODE_ARR_PACKET_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeArrPacket", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField A_PACKET_FIELD_DESC = new org.apache.thrift.protocol.TField("aPacket", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField AL_ARR_PACKET_FIELD_DESC = new org.apache.thrift.protocol.TField("alArrPacket", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField MT_PACKET_FIELD_DESC = new org.apache.thrift.protocol.TField("mtPacket", org.apache.thrift.protocol.TType.STRUCT, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PacketBodyStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PacketBodyTupleSchemeFactory());
  }

  public AlarmSourcePacket asPacket; // optional
  public NodePacket nodePacket; // optional
  public NodeArrayPacket nodeArrPacket; // optional
  public AlarmPacket aPacket; // optional
  public AlarmArrayPacket alArrPacket; // optional
  public AlarmMaintainPacket mtPacket; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AS_PACKET((short)1, "asPacket"),
    NODE_PACKET((short)2, "nodePacket"),
    NODE_ARR_PACKET((short)3, "nodeArrPacket"),
    A_PACKET((short)4, "aPacket"),
    AL_ARR_PACKET((short)5, "alArrPacket"),
    MT_PACKET((short)6, "mtPacket");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AS_PACKET
          return AS_PACKET;
        case 2: // NODE_PACKET
          return NODE_PACKET;
        case 3: // NODE_ARR_PACKET
          return NODE_ARR_PACKET;
        case 4: // A_PACKET
          return A_PACKET;
        case 5: // AL_ARR_PACKET
          return AL_ARR_PACKET;
        case 6: // MT_PACKET
          return MT_PACKET;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.AS_PACKET, _Fields.NODE_PACKET, _Fields.NODE_ARR_PACKET, _Fields.A_PACKET, _Fields.AL_ARR_PACKET, _Fields.MT_PACKET};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AS_PACKET, new org.apache.thrift.meta_data.FieldMetaData("asPacket", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AlarmSourcePacket.class)));
    tmpMap.put(_Fields.NODE_PACKET, new org.apache.thrift.meta_data.FieldMetaData("nodePacket", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NodePacket.class)));
    tmpMap.put(_Fields.NODE_ARR_PACKET, new org.apache.thrift.meta_data.FieldMetaData("nodeArrPacket", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NodeArrayPacket.class)));
    tmpMap.put(_Fields.A_PACKET, new org.apache.thrift.meta_data.FieldMetaData("aPacket", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AlarmPacket.class)));
    tmpMap.put(_Fields.AL_ARR_PACKET, new org.apache.thrift.meta_data.FieldMetaData("alArrPacket", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AlarmArrayPacket.class)));
    tmpMap.put(_Fields.MT_PACKET, new org.apache.thrift.meta_data.FieldMetaData("mtPacket", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AlarmMaintainPacket.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PacketBody.class, metaDataMap);
  }

  public PacketBody() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PacketBody(PacketBody other) {
    if (other.isSetAsPacket()) {
      this.asPacket = new AlarmSourcePacket(other.asPacket);
    }
    if (other.isSetNodePacket()) {
      this.nodePacket = new NodePacket(other.nodePacket);
    }
    if (other.isSetNodeArrPacket()) {
      this.nodeArrPacket = new NodeArrayPacket(other.nodeArrPacket);
    }
    if (other.isSetAPacket()) {
      this.aPacket = new AlarmPacket(other.aPacket);
    }
    if (other.isSetAlArrPacket()) {
      this.alArrPacket = new AlarmArrayPacket(other.alArrPacket);
    }
    if (other.isSetMtPacket()) {
      this.mtPacket = new AlarmMaintainPacket(other.mtPacket);
    }
  }

  public PacketBody deepCopy() {
    return new PacketBody(this);
  }

  @Override
  public void clear() {
    this.asPacket = null;
    this.nodePacket = null;
    this.nodeArrPacket = null;
    this.aPacket = null;
    this.alArrPacket = null;
    this.mtPacket = null;
  }

  public AlarmSourcePacket getAsPacket() {
    return this.asPacket;
  }

  public PacketBody setAsPacket(AlarmSourcePacket asPacket) {
    this.asPacket = asPacket;
    return this;
  }

  public void unsetAsPacket() {
    this.asPacket = null;
  }

  /** Returns true if field asPacket is set (has been assigned a value) and false otherwise */
  public boolean isSetAsPacket() {
    return this.asPacket != null;
  }

  public void setAsPacketIsSet(boolean value) {
    if (!value) {
      this.asPacket = null;
    }
  }

  public NodePacket getNodePacket() {
    return this.nodePacket;
  }

  public PacketBody setNodePacket(NodePacket nodePacket) {
    this.nodePacket = nodePacket;
    return this;
  }

  public void unsetNodePacket() {
    this.nodePacket = null;
  }

  /** Returns true if field nodePacket is set (has been assigned a value) and false otherwise */
  public boolean isSetNodePacket() {
    return this.nodePacket != null;
  }

  public void setNodePacketIsSet(boolean value) {
    if (!value) {
      this.nodePacket = null;
    }
  }

  public NodeArrayPacket getNodeArrPacket() {
    return this.nodeArrPacket;
  }

  public PacketBody setNodeArrPacket(NodeArrayPacket nodeArrPacket) {
    this.nodeArrPacket = nodeArrPacket;
    return this;
  }

  public void unsetNodeArrPacket() {
    this.nodeArrPacket = null;
  }

  /** Returns true if field nodeArrPacket is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeArrPacket() {
    return this.nodeArrPacket != null;
  }

  public void setNodeArrPacketIsSet(boolean value) {
    if (!value) {
      this.nodeArrPacket = null;
    }
  }

  public AlarmPacket getAPacket() {
    return this.aPacket;
  }

  public PacketBody setAPacket(AlarmPacket aPacket) {
    this.aPacket = aPacket;
    return this;
  }

  public void unsetAPacket() {
    this.aPacket = null;
  }

  /** Returns true if field aPacket is set (has been assigned a value) and false otherwise */
  public boolean isSetAPacket() {
    return this.aPacket != null;
  }

  public void setAPacketIsSet(boolean value) {
    if (!value) {
      this.aPacket = null;
    }
  }

  public AlarmArrayPacket getAlArrPacket() {
    return this.alArrPacket;
  }

  public PacketBody setAlArrPacket(AlarmArrayPacket alArrPacket) {
    this.alArrPacket = alArrPacket;
    return this;
  }

  public void unsetAlArrPacket() {
    this.alArrPacket = null;
  }

  /** Returns true if field alArrPacket is set (has been assigned a value) and false otherwise */
  public boolean isSetAlArrPacket() {
    return this.alArrPacket != null;
  }

  public void setAlArrPacketIsSet(boolean value) {
    if (!value) {
      this.alArrPacket = null;
    }
  }

  public AlarmMaintainPacket getMtPacket() {
    return this.mtPacket;
  }

  public PacketBody setMtPacket(AlarmMaintainPacket mtPacket) {
    this.mtPacket = mtPacket;
    return this;
  }

  public void unsetMtPacket() {
    this.mtPacket = null;
  }

  /** Returns true if field mtPacket is set (has been assigned a value) and false otherwise */
  public boolean isSetMtPacket() {
    return this.mtPacket != null;
  }

  public void setMtPacketIsSet(boolean value) {
    if (!value) {
      this.mtPacket = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case AS_PACKET:
      if (value == null) {
        unsetAsPacket();
      } else {
        setAsPacket((AlarmSourcePacket)value);
      }
      break;

    case NODE_PACKET:
      if (value == null) {
        unsetNodePacket();
      } else {
        setNodePacket((NodePacket)value);
      }
      break;

    case NODE_ARR_PACKET:
      if (value == null) {
        unsetNodeArrPacket();
      } else {
        setNodeArrPacket((NodeArrayPacket)value);
      }
      break;

    case A_PACKET:
      if (value == null) {
        unsetAPacket();
      } else {
        setAPacket((AlarmPacket)value);
      }
      break;

    case AL_ARR_PACKET:
      if (value == null) {
        unsetAlArrPacket();
      } else {
        setAlArrPacket((AlarmArrayPacket)value);
      }
      break;

    case MT_PACKET:
      if (value == null) {
        unsetMtPacket();
      } else {
        setMtPacket((AlarmMaintainPacket)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case AS_PACKET:
      return getAsPacket();

    case NODE_PACKET:
      return getNodePacket();

    case NODE_ARR_PACKET:
      return getNodeArrPacket();

    case A_PACKET:
      return getAPacket();

    case AL_ARR_PACKET:
      return getAlArrPacket();

    case MT_PACKET:
      return getMtPacket();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case AS_PACKET:
      return isSetAsPacket();
    case NODE_PACKET:
      return isSetNodePacket();
    case NODE_ARR_PACKET:
      return isSetNodeArrPacket();
    case A_PACKET:
      return isSetAPacket();
    case AL_ARR_PACKET:
      return isSetAlArrPacket();
    case MT_PACKET:
      return isSetMtPacket();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PacketBody)
      return this.equals((PacketBody)that);
    return false;
  }

  public boolean equals(PacketBody that) {
    if (that == null)
      return false;

    boolean this_present_asPacket = true && this.isSetAsPacket();
    boolean that_present_asPacket = true && that.isSetAsPacket();
    if (this_present_asPacket || that_present_asPacket) {
      if (!(this_present_asPacket && that_present_asPacket))
        return false;
      if (!this.asPacket.equals(that.asPacket))
        return false;
    }

    boolean this_present_nodePacket = true && this.isSetNodePacket();
    boolean that_present_nodePacket = true && that.isSetNodePacket();
    if (this_present_nodePacket || that_present_nodePacket) {
      if (!(this_present_nodePacket && that_present_nodePacket))
        return false;
      if (!this.nodePacket.equals(that.nodePacket))
        return false;
    }

    boolean this_present_nodeArrPacket = true && this.isSetNodeArrPacket();
    boolean that_present_nodeArrPacket = true && that.isSetNodeArrPacket();
    if (this_present_nodeArrPacket || that_present_nodeArrPacket) {
      if (!(this_present_nodeArrPacket && that_present_nodeArrPacket))
        return false;
      if (!this.nodeArrPacket.equals(that.nodeArrPacket))
        return false;
    }

    boolean this_present_aPacket = true && this.isSetAPacket();
    boolean that_present_aPacket = true && that.isSetAPacket();
    if (this_present_aPacket || that_present_aPacket) {
      if (!(this_present_aPacket && that_present_aPacket))
        return false;
      if (!this.aPacket.equals(that.aPacket))
        return false;
    }

    boolean this_present_alArrPacket = true && this.isSetAlArrPacket();
    boolean that_present_alArrPacket = true && that.isSetAlArrPacket();
    if (this_present_alArrPacket || that_present_alArrPacket) {
      if (!(this_present_alArrPacket && that_present_alArrPacket))
        return false;
      if (!this.alArrPacket.equals(that.alArrPacket))
        return false;
    }

    boolean this_present_mtPacket = true && this.isSetMtPacket();
    boolean that_present_mtPacket = true && that.isSetMtPacket();
    if (this_present_mtPacket || that_present_mtPacket) {
      if (!(this_present_mtPacket && that_present_mtPacket))
        return false;
      if (!this.mtPacket.equals(that.mtPacket))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(PacketBody other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PacketBody typedOther = (PacketBody)other;

    lastComparison = Boolean.valueOf(isSetAsPacket()).compareTo(typedOther.isSetAsPacket());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAsPacket()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.asPacket, typedOther.asPacket);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNodePacket()).compareTo(typedOther.isSetNodePacket());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodePacket()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodePacket, typedOther.nodePacket);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNodeArrPacket()).compareTo(typedOther.isSetNodeArrPacket());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeArrPacket()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeArrPacket, typedOther.nodeArrPacket);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAPacket()).compareTo(typedOther.isSetAPacket());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAPacket()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aPacket, typedOther.aPacket);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlArrPacket()).compareTo(typedOther.isSetAlArrPacket());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlArrPacket()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alArrPacket, typedOther.alArrPacket);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMtPacket()).compareTo(typedOther.isSetMtPacket());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMtPacket()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mtPacket, typedOther.mtPacket);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PacketBody(");
    boolean first = true;

    if (isSetAsPacket()) {
      sb.append("asPacket:");
      if (this.asPacket == null) {
        sb.append("null");
      } else {
        sb.append(this.asPacket);
      }
      first = false;
    }
    if (isSetNodePacket()) {
      if (!first) sb.append(", ");
      sb.append("nodePacket:");
      if (this.nodePacket == null) {
        sb.append("null");
      } else {
        sb.append(this.nodePacket);
      }
      first = false;
    }
    if (isSetNodeArrPacket()) {
      if (!first) sb.append(", ");
      sb.append("nodeArrPacket:");
      if (this.nodeArrPacket == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeArrPacket);
      }
      first = false;
    }
    if (isSetAPacket()) {
      if (!first) sb.append(", ");
      sb.append("aPacket:");
      if (this.aPacket == null) {
        sb.append("null");
      } else {
        sb.append(this.aPacket);
      }
      first = false;
    }
    if (isSetAlArrPacket()) {
      if (!first) sb.append(", ");
      sb.append("alArrPacket:");
      if (this.alArrPacket == null) {
        sb.append("null");
      } else {
        sb.append(this.alArrPacket);
      }
      first = false;
    }
    if (isSetMtPacket()) {
      if (!first) sb.append(", ");
      sb.append("mtPacket:");
      if (this.mtPacket == null) {
        sb.append("null");
      } else {
        sb.append(this.mtPacket);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
    if (asPacket != null) {
      asPacket.validate();
    }
    if (nodePacket != null) {
      nodePacket.validate();
    }
    if (nodeArrPacket != null) {
      nodeArrPacket.validate();
    }
    if (aPacket != null) {
      aPacket.validate();
    }
    if (alArrPacket != null) {
      alArrPacket.validate();
    }
    if (mtPacket != null) {
      mtPacket.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PacketBodyStandardSchemeFactory implements SchemeFactory {
    public PacketBodyStandardScheme getScheme() {
      return new PacketBodyStandardScheme();
    }
  }

  private static class PacketBodyStandardScheme extends StandardScheme<PacketBody> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PacketBody struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // AS_PACKET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.asPacket = new AlarmSourcePacket();
              struct.asPacket.read(iprot);
              struct.setAsPacketIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NODE_PACKET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.nodePacket = new NodePacket();
              struct.nodePacket.read(iprot);
              struct.setNodePacketIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NODE_ARR_PACKET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.nodeArrPacket = new NodeArrayPacket();
              struct.nodeArrPacket.read(iprot);
              struct.setNodeArrPacketIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // A_PACKET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.aPacket = new AlarmPacket();
              struct.aPacket.read(iprot);
              struct.setAPacketIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AL_ARR_PACKET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.alArrPacket = new AlarmArrayPacket();
              struct.alArrPacket.read(iprot);
              struct.setAlArrPacketIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MT_PACKET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.mtPacket = new AlarmMaintainPacket();
              struct.mtPacket.read(iprot);
              struct.setMtPacketIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PacketBody struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.asPacket != null) {
        if (struct.isSetAsPacket()) {
          oprot.writeFieldBegin(AS_PACKET_FIELD_DESC);
          struct.asPacket.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.nodePacket != null) {
        if (struct.isSetNodePacket()) {
          oprot.writeFieldBegin(NODE_PACKET_FIELD_DESC);
          struct.nodePacket.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.nodeArrPacket != null) {
        if (struct.isSetNodeArrPacket()) {
          oprot.writeFieldBegin(NODE_ARR_PACKET_FIELD_DESC);
          struct.nodeArrPacket.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.aPacket != null) {
        if (struct.isSetAPacket()) {
          oprot.writeFieldBegin(A_PACKET_FIELD_DESC);
          struct.aPacket.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.alArrPacket != null) {
        if (struct.isSetAlArrPacket()) {
          oprot.writeFieldBegin(AL_ARR_PACKET_FIELD_DESC);
          struct.alArrPacket.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.mtPacket != null) {
        if (struct.isSetMtPacket()) {
          oprot.writeFieldBegin(MT_PACKET_FIELD_DESC);
          struct.mtPacket.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PacketBodyTupleSchemeFactory implements SchemeFactory {
    public PacketBodyTupleScheme getScheme() {
      return new PacketBodyTupleScheme();
    }
  }

  private static class PacketBodyTupleScheme extends TupleScheme<PacketBody> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PacketBody struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAsPacket()) {
        optionals.set(0);
      }
      if (struct.isSetNodePacket()) {
        optionals.set(1);
      }
      if (struct.isSetNodeArrPacket()) {
        optionals.set(2);
      }
      if (struct.isSetAPacket()) {
        optionals.set(3);
      }
      if (struct.isSetAlArrPacket()) {
        optionals.set(4);
      }
      if (struct.isSetMtPacket()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetAsPacket()) {
        struct.asPacket.write(oprot);
      }
      if (struct.isSetNodePacket()) {
        struct.nodePacket.write(oprot);
      }
      if (struct.isSetNodeArrPacket()) {
        struct.nodeArrPacket.write(oprot);
      }
      if (struct.isSetAPacket()) {
        struct.aPacket.write(oprot);
      }
      if (struct.isSetAlArrPacket()) {
        struct.alArrPacket.write(oprot);
      }
      if (struct.isSetMtPacket()) {
        struct.mtPacket.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PacketBody struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.asPacket = new AlarmSourcePacket();
        struct.asPacket.read(iprot);
        struct.setAsPacketIsSet(true);
      }
      if (incoming.get(1)) {
        struct.nodePacket = new NodePacket();
        struct.nodePacket.read(iprot);
        struct.setNodePacketIsSet(true);
      }
      if (incoming.get(2)) {
        struct.nodeArrPacket = new NodeArrayPacket();
        struct.nodeArrPacket.read(iprot);
        struct.setNodeArrPacketIsSet(true);
      }
      if (incoming.get(3)) {
        struct.aPacket = new AlarmPacket();
        struct.aPacket.read(iprot);
        struct.setAPacketIsSet(true);
      }
      if (incoming.get(4)) {
        struct.alArrPacket = new AlarmArrayPacket();
        struct.alArrPacket.read(iprot);
        struct.setAlArrPacketIsSet(true);
      }
      if (incoming.get(5)) {
        struct.mtPacket = new AlarmMaintainPacket();
        struct.mtPacket.read(iprot);
        struct.setMtPacketIsSet(true);
      }
    }
  }

}

