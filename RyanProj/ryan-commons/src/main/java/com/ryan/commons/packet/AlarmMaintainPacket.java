/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ryan.commons.packet;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.*;

/**
 * 报警维护信息
 */
public class AlarmMaintainPacket implements org.apache.thrift.TBase<AlarmMaintainPacket, AlarmMaintainPacket._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AlarmMaintainPacket");

  private static final org.apache.thrift.protocol.TField ALARMID_FIELD_DESC = new org.apache.thrift.protocol.TField("alarmid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField OPER_FIELD_DESC = new org.apache.thrift.protocol.TField("oper", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField OPER_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("operTime", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField OPER_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("operBy", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PROP_FIELD_DESC = new org.apache.thrift.protocol.TField("prop", org.apache.thrift.protocol.TType.MAP, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AlarmMaintainPacketStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AlarmMaintainPacketTupleSchemeFactory());
  }

  /**
   * 报警编号
   */
  public int alarmid; // optional
  /**
   * 结点测点所在的报警源ip地址
   */
  public String ip; // optional
  /**
   * 报警操作（确认，复位，挂起，取消挂起，抑制，取消抑制，关闭，启动，评论）
   */
  public String oper; // optional
  /**
   * 操作时间
   */
  public long operTime; // optional
  /**
   * 操作员名
   */
  public String operBy; // optional
  /**
   * 报警维护属性
   */
  public Map<String,String> prop; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 报警编号
     */
    ALARMID((short)1, "alarmid"),
    /**
     * 结点测点所在的报警源ip地址
     */
    IP((short)2, "ip"),
    /**
     * 报警操作（确认，复位，挂起，取消挂起，抑制，取消抑制，关闭，启动，评论）
     */
    OPER((short)3, "oper"),
    /**
     * 操作时间
     */
    OPER_TIME((short)4, "operTime"),
    /**
     * 操作员名
     */
    OPER_BY((short)5, "operBy"),
    /**
     * 报警维护属性
     */
    PROP((short)6, "prop");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ALARMID
          return ALARMID;
        case 2: // IP
          return IP;
        case 3: // OPER
          return OPER;
        case 4: // OPER_TIME
          return OPER_TIME;
        case 5: // OPER_BY
          return OPER_BY;
        case 6: // PROP
          return PROP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ALARMID_ISSET_ID = 0;
  private static final int __OPERTIME_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ALARMID, _Fields.IP, _Fields.OPER, _Fields.OPER_TIME, _Fields.OPER_BY, _Fields.PROP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ALARMID, new org.apache.thrift.meta_data.FieldMetaData("alarmid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPER, new org.apache.thrift.meta_data.FieldMetaData("oper", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPER_TIME, new org.apache.thrift.meta_data.FieldMetaData("operTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OPER_BY, new org.apache.thrift.meta_data.FieldMetaData("operBy", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROP, new org.apache.thrift.meta_data.FieldMetaData("prop", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AlarmMaintainPacket.class, metaDataMap);
  }

  public AlarmMaintainPacket() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AlarmMaintainPacket(AlarmMaintainPacket other) {
    __isset_bitfield = other.__isset_bitfield;
    this.alarmid = other.alarmid;
    if (other.isSetIp()) {
      this.ip = other.ip;
    }
    if (other.isSetOper()) {
      this.oper = other.oper;
    }
    this.operTime = other.operTime;
    if (other.isSetOperBy()) {
      this.operBy = other.operBy;
    }
    if (other.isSetProp()) {
      Map<String,String> __this__prop = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.prop.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__prop_copy_key = other_element_key;

        String __this__prop_copy_value = other_element_value;

        __this__prop.put(__this__prop_copy_key, __this__prop_copy_value);
      }
      this.prop = __this__prop;
    }
  }

  public AlarmMaintainPacket deepCopy() {
    return new AlarmMaintainPacket(this);
  }

  @Override
  public void clear() {
    setAlarmidIsSet(false);
    this.alarmid = 0;
    this.ip = null;
    this.oper = null;
    setOperTimeIsSet(false);
    this.operTime = 0;
    this.operBy = null;
    this.prop = null;
  }

  /**
   * 报警编号
   */
  public int getAlarmid() {
    return this.alarmid;
  }

  /**
   * 报警编号
   */
  public AlarmMaintainPacket setAlarmid(int alarmid) {
    this.alarmid = alarmid;
    setAlarmidIsSet(true);
    return this;
  }

  public void unsetAlarmid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALARMID_ISSET_ID);
  }

  /** Returns true if field alarmid is set (has been assigned a value) and false otherwise */
  public boolean isSetAlarmid() {
    return EncodingUtils.testBit(__isset_bitfield, __ALARMID_ISSET_ID);
  }

  public void setAlarmidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALARMID_ISSET_ID, value);
  }

  /**
   * 结点测点所在的报警源ip地址
   */
  public String getIp() {
    return this.ip;
  }

  /**
   * 结点测点所在的报警源ip地址
   */
  public AlarmMaintainPacket setIp(String ip) {
    this.ip = ip;
    return this;
  }

  public void unsetIp() {
    this.ip = null;
  }

  /** Returns true if field ip is set (has been assigned a value) and false otherwise */
  public boolean isSetIp() {
    return this.ip != null;
  }

  public void setIpIsSet(boolean value) {
    if (!value) {
      this.ip = null;
    }
  }

  /**
   * 报警操作（确认，复位，挂起，取消挂起，抑制，取消抑制，关闭，启动，评论）
   */
  public String getOper() {
    return this.oper;
  }

  /**
   * 报警操作（确认，复位，挂起，取消挂起，抑制，取消抑制，关闭，启动，评论）
   */
  public AlarmMaintainPacket setOper(String oper) {
    this.oper = oper;
    return this;
  }

  public void unsetOper() {
    this.oper = null;
  }

  /** Returns true if field oper is set (has been assigned a value) and false otherwise */
  public boolean isSetOper() {
    return this.oper != null;
  }

  public void setOperIsSet(boolean value) {
    if (!value) {
      this.oper = null;
    }
  }

  /**
   * 操作时间
   */
  public long getOperTime() {
    return this.operTime;
  }

  /**
   * 操作时间
   */
  public AlarmMaintainPacket setOperTime(long operTime) {
    this.operTime = operTime;
    setOperTimeIsSet(true);
    return this;
  }

  public void unsetOperTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPERTIME_ISSET_ID);
  }

  /** Returns true if field operTime is set (has been assigned a value) and false otherwise */
  public boolean isSetOperTime() {
    return EncodingUtils.testBit(__isset_bitfield, __OPERTIME_ISSET_ID);
  }

  public void setOperTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPERTIME_ISSET_ID, value);
  }

  /**
   * 操作员名
   */
  public String getOperBy() {
    return this.operBy;
  }

  /**
   * 操作员名
   */
  public AlarmMaintainPacket setOperBy(String operBy) {
    this.operBy = operBy;
    return this;
  }

  public void unsetOperBy() {
    this.operBy = null;
  }

  /** Returns true if field operBy is set (has been assigned a value) and false otherwise */
  public boolean isSetOperBy() {
    return this.operBy != null;
  }

  public void setOperByIsSet(boolean value) {
    if (!value) {
      this.operBy = null;
    }
  }

  public int getPropSize() {
    return (this.prop == null) ? 0 : this.prop.size();
  }

  public void putToProp(String key, String val) {
    if (this.prop == null) {
      this.prop = new HashMap<String,String>();
    }
    this.prop.put(key, val);
  }

  /**
   * 报警维护属性
   */
  public Map<String,String> getProp() {
    return this.prop;
  }

  /**
   * 报警维护属性
   */
  public AlarmMaintainPacket setProp(Map<String,String> prop) {
    this.prop = prop;
    return this;
  }

  public void unsetProp() {
    this.prop = null;
  }

  /** Returns true if field prop is set (has been assigned a value) and false otherwise */
  public boolean isSetProp() {
    return this.prop != null;
  }

  public void setPropIsSet(boolean value) {
    if (!value) {
      this.prop = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ALARMID:
      if (value == null) {
        unsetAlarmid();
      } else {
        setAlarmid((Integer)value);
      }
      break;

    case IP:
      if (value == null) {
        unsetIp();
      } else {
        setIp((String)value);
      }
      break;

    case OPER:
      if (value == null) {
        unsetOper();
      } else {
        setOper((String)value);
      }
      break;

    case OPER_TIME:
      if (value == null) {
        unsetOperTime();
      } else {
        setOperTime((Long)value);
      }
      break;

    case OPER_BY:
      if (value == null) {
        unsetOperBy();
      } else {
        setOperBy((String)value);
      }
      break;

    case PROP:
      if (value == null) {
        unsetProp();
      } else {
        setProp((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ALARMID:
      return Integer.valueOf(getAlarmid());

    case IP:
      return getIp();

    case OPER:
      return getOper();

    case OPER_TIME:
      return Long.valueOf(getOperTime());

    case OPER_BY:
      return getOperBy();

    case PROP:
      return getProp();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ALARMID:
      return isSetAlarmid();
    case IP:
      return isSetIp();
    case OPER:
      return isSetOper();
    case OPER_TIME:
      return isSetOperTime();
    case OPER_BY:
      return isSetOperBy();
    case PROP:
      return isSetProp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AlarmMaintainPacket)
      return this.equals((AlarmMaintainPacket)that);
    return false;
  }

  public boolean equals(AlarmMaintainPacket that) {
    if (that == null)
      return false;

    boolean this_present_alarmid = true && this.isSetAlarmid();
    boolean that_present_alarmid = true && that.isSetAlarmid();
    if (this_present_alarmid || that_present_alarmid) {
      if (!(this_present_alarmid && that_present_alarmid))
        return false;
      if (this.alarmid != that.alarmid)
        return false;
    }

    boolean this_present_ip = true && this.isSetIp();
    boolean that_present_ip = true && that.isSetIp();
    if (this_present_ip || that_present_ip) {
      if (!(this_present_ip && that_present_ip))
        return false;
      if (!this.ip.equals(that.ip))
        return false;
    }

    boolean this_present_oper = true && this.isSetOper();
    boolean that_present_oper = true && that.isSetOper();
    if (this_present_oper || that_present_oper) {
      if (!(this_present_oper && that_present_oper))
        return false;
      if (!this.oper.equals(that.oper))
        return false;
    }

    boolean this_present_operTime = true && this.isSetOperTime();
    boolean that_present_operTime = true && that.isSetOperTime();
    if (this_present_operTime || that_present_operTime) {
      if (!(this_present_operTime && that_present_operTime))
        return false;
      if (this.operTime != that.operTime)
        return false;
    }

    boolean this_present_operBy = true && this.isSetOperBy();
    boolean that_present_operBy = true && that.isSetOperBy();
    if (this_present_operBy || that_present_operBy) {
      if (!(this_present_operBy && that_present_operBy))
        return false;
      if (!this.operBy.equals(that.operBy))
        return false;
    }

    boolean this_present_prop = true && this.isSetProp();
    boolean that_present_prop = true && that.isSetProp();
    if (this_present_prop || that_present_prop) {
      if (!(this_present_prop && that_present_prop))
        return false;
      if (!this.prop.equals(that.prop))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(AlarmMaintainPacket other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    AlarmMaintainPacket typedOther = (AlarmMaintainPacket)other;

    lastComparison = Boolean.valueOf(isSetAlarmid()).compareTo(typedOther.isSetAlarmid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlarmid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alarmid, typedOther.alarmid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIp()).compareTo(typedOther.isSetIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, typedOther.ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOper()).compareTo(typedOther.isSetOper());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOper()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oper, typedOther.oper);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperTime()).compareTo(typedOther.isSetOperTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operTime, typedOther.operTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperBy()).compareTo(typedOther.isSetOperBy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperBy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operBy, typedOther.operBy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProp()).compareTo(typedOther.isSetProp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prop, typedOther.prop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AlarmMaintainPacket(");
    boolean first = true;

    if (isSetAlarmid()) {
      sb.append("alarmid:");
      sb.append(this.alarmid);
      first = false;
    }
    if (isSetIp()) {
      if (!first) sb.append(", ");
      sb.append("ip:");
      if (this.ip == null) {
        sb.append("null");
      } else {
        sb.append(this.ip);
      }
      first = false;
    }
    if (isSetOper()) {
      if (!first) sb.append(", ");
      sb.append("oper:");
      if (this.oper == null) {
        sb.append("null");
      } else {
        sb.append(this.oper);
      }
      first = false;
    }
    if (isSetOperTime()) {
      if (!first) sb.append(", ");
      sb.append("operTime:");
      sb.append(this.operTime);
      first = false;
    }
    if (isSetOperBy()) {
      if (!first) sb.append(", ");
      sb.append("operBy:");
      if (this.operBy == null) {
        sb.append("null");
      } else {
        sb.append(this.operBy);
      }
      first = false;
    }
    if (isSetProp()) {
      if (!first) sb.append(", ");
      sb.append("prop:");
      if (this.prop == null) {
        sb.append("null");
      } else {
        sb.append(this.prop);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AlarmMaintainPacketStandardSchemeFactory implements SchemeFactory {
    public AlarmMaintainPacketStandardScheme getScheme() {
      return new AlarmMaintainPacketStandardScheme();
    }
  }

  private static class AlarmMaintainPacketStandardScheme extends StandardScheme<AlarmMaintainPacket> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AlarmMaintainPacket struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // ALARMID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.alarmid = iprot.readI32();
              struct.setAlarmidIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ip = iprot.readString();
              struct.setIpIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OPER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.oper = iprot.readString();
              struct.setOperIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OPER_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.operTime = iprot.readI64();
              struct.setOperTimeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OPER_BY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operBy = iprot.readString();
              struct.setOperByIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PROP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map44 = iprot.readMapBegin();
                struct.prop = new HashMap<String,String>(2*_map44.size);
                for (int _i45 = 0; _i45 < _map44.size; ++_i45)
                {
                  String _key46; // required
                  String _val47; // required
                  _key46 = iprot.readString();
                  _val47 = iprot.readString();
                  struct.prop.put(_key46, _val47);
                }
                iprot.readMapEnd();
              }
              struct.setPropIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AlarmMaintainPacket struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetAlarmid()) {
        oprot.writeFieldBegin(ALARMID_FIELD_DESC);
        oprot.writeI32(struct.alarmid);
        oprot.writeFieldEnd();
      }
      if (struct.ip != null) {
        if (struct.isSetIp()) {
          oprot.writeFieldBegin(IP_FIELD_DESC);
          oprot.writeString(struct.ip);
          oprot.writeFieldEnd();
        }
      }
      if (struct.oper != null) {
        if (struct.isSetOper()) {
          oprot.writeFieldBegin(OPER_FIELD_DESC);
          oprot.writeString(struct.oper);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOperTime()) {
        oprot.writeFieldBegin(OPER_TIME_FIELD_DESC);
        oprot.writeI64(struct.operTime);
        oprot.writeFieldEnd();
      }
      if (struct.operBy != null) {
        if (struct.isSetOperBy()) {
          oprot.writeFieldBegin(OPER_BY_FIELD_DESC);
          oprot.writeString(struct.operBy);
          oprot.writeFieldEnd();
        }
      }
      if (struct.prop != null) {
        if (struct.isSetProp()) {
          oprot.writeFieldBegin(PROP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.prop.size()));
            for (Map.Entry<String, String> _iter48 : struct.prop.entrySet())
            {
              oprot.writeString(_iter48.getKey());
              oprot.writeString(_iter48.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AlarmMaintainPacketTupleSchemeFactory implements SchemeFactory {
    public AlarmMaintainPacketTupleScheme getScheme() {
      return new AlarmMaintainPacketTupleScheme();
    }
  }

  private static class AlarmMaintainPacketTupleScheme extends TupleScheme<AlarmMaintainPacket> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AlarmMaintainPacket struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAlarmid()) {
        optionals.set(0);
      }
      if (struct.isSetIp()) {
        optionals.set(1);
      }
      if (struct.isSetOper()) {
        optionals.set(2);
      }
      if (struct.isSetOperTime()) {
        optionals.set(3);
      }
      if (struct.isSetOperBy()) {
        optionals.set(4);
      }
      if (struct.isSetProp()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetAlarmid()) {
        oprot.writeI32(struct.alarmid);
      }
      if (struct.isSetIp()) {
        oprot.writeString(struct.ip);
      }
      if (struct.isSetOper()) {
        oprot.writeString(struct.oper);
      }
      if (struct.isSetOperTime()) {
        oprot.writeI64(struct.operTime);
      }
      if (struct.isSetOperBy()) {
        oprot.writeString(struct.operBy);
      }
      if (struct.isSetProp()) {
        {
          oprot.writeI32(struct.prop.size());
          for (Map.Entry<String, String> _iter49 : struct.prop.entrySet())
          {
            oprot.writeString(_iter49.getKey());
            oprot.writeString(_iter49.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AlarmMaintainPacket struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.alarmid = iprot.readI32();
        struct.setAlarmidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ip = iprot.readString();
        struct.setIpIsSet(true);
      }
      if (incoming.get(2)) {
        struct.oper = iprot.readString();
        struct.setOperIsSet(true);
      }
      if (incoming.get(3)) {
        struct.operTime = iprot.readI64();
        struct.setOperTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.operBy = iprot.readString();
        struct.setOperByIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map50 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.prop = new HashMap<String,String>(2*_map50.size);
          for (int _i51 = 0; _i51 < _map50.size; ++_i51)
          {
            String _key52; // required
            String _val53; // required
            _key52 = iprot.readString();
            _val53 = iprot.readString();
            struct.prop.put(_key52, _val53);
          }
        }
        struct.setPropIsSet(true);
      }
    }
  }

}

