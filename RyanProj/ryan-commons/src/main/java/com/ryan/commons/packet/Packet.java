/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ryan.commons.packet;

import org.apache.thrift.TException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.*;

public class Packet implements org.apache.thrift.TBase<Packet, Packet._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Packet");

  private static final org.apache.thrift.protocol.TField PACKET_HEAD_FIELD_DESC = new org.apache.thrift.protocol.TField("packetHead", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField PACKET_BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("packetBody", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PacketStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PacketTupleSchemeFactory());
  }

  public PacketHead packetHead; // optional
  public PacketBody packetBody; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PACKET_HEAD((short)1, "packetHead"),
    PACKET_BODY((short)2, "packetBody");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PACKET_HEAD
          return PACKET_HEAD;
        case 2: // PACKET_BODY
          return PACKET_BODY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.PACKET_HEAD, _Fields.PACKET_BODY};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PACKET_HEAD, new org.apache.thrift.meta_data.FieldMetaData("packetHead", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PacketHead.class)));
    tmpMap.put(_Fields.PACKET_BODY, new org.apache.thrift.meta_data.FieldMetaData("packetBody", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PacketBody.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Packet.class, metaDataMap);
  }

  public Packet() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Packet(Packet other) {
    if (other.isSetPacketHead()) {
      this.packetHead = new PacketHead(other.packetHead);
    }
    if (other.isSetPacketBody()) {
      this.packetBody = new PacketBody(other.packetBody);
    }
  }

  public Packet deepCopy() {
    return new Packet(this);
  }

  @Override
  public void clear() {
    this.packetHead = null;
    this.packetBody = null;
  }

  public PacketHead getPacketHead() {
    return this.packetHead;
  }

  public Packet setPacketHead(PacketHead packetHead) {
    this.packetHead = packetHead;
    return this;
  }

  public void unsetPacketHead() {
    this.packetHead = null;
  }

  /** Returns true if field packetHead is set (has been assigned a value) and false otherwise */
  public boolean isSetPacketHead() {
    return this.packetHead != null;
  }

  public void setPacketHeadIsSet(boolean value) {
    if (!value) {
      this.packetHead = null;
    }
  }

  public PacketBody getPacketBody() {
    return this.packetBody;
  }

  public Packet setPacketBody(PacketBody packetBody) {
    this.packetBody = packetBody;
    return this;
  }

  public void unsetPacketBody() {
    this.packetBody = null;
  }

  /** Returns true if field packetBody is set (has been assigned a value) and false otherwise */
  public boolean isSetPacketBody() {
    return this.packetBody != null;
  }

  public void setPacketBodyIsSet(boolean value) {
    if (!value) {
      this.packetBody = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PACKET_HEAD:
      if (value == null) {
        unsetPacketHead();
      } else {
        setPacketHead((PacketHead)value);
      }
      break;

    case PACKET_BODY:
      if (value == null) {
        unsetPacketBody();
      } else {
        setPacketBody((PacketBody)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PACKET_HEAD:
      return getPacketHead();

    case PACKET_BODY:
      return getPacketBody();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PACKET_HEAD:
      return isSetPacketHead();
    case PACKET_BODY:
      return isSetPacketBody();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Packet)
      return this.equals((Packet)that);
    return false;
  }

  public boolean equals(Packet that) {
    if (that == null)
      return false;

    boolean this_present_packetHead = true && this.isSetPacketHead();
    boolean that_present_packetHead = true && that.isSetPacketHead();
    if (this_present_packetHead || that_present_packetHead) {
      if (!(this_present_packetHead && that_present_packetHead))
        return false;
      if (!this.packetHead.equals(that.packetHead))
        return false;
    }

    boolean this_present_packetBody = true && this.isSetPacketBody();
    boolean that_present_packetBody = true && that.isSetPacketBody();
    if (this_present_packetBody || that_present_packetBody) {
      if (!(this_present_packetBody && that_present_packetBody))
        return false;
      if (!this.packetBody.equals(that.packetBody))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Packet other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Packet typedOther = (Packet)other;

    lastComparison = Boolean.valueOf(isSetPacketHead()).compareTo(typedOther.isSetPacketHead());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPacketHead()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.packetHead, typedOther.packetHead);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPacketBody()).compareTo(typedOther.isSetPacketBody());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPacketBody()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.packetBody, typedOther.packetBody);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Packet(");
    boolean first = true;

    if (isSetPacketHead()) {
      sb.append("packetHead:");
      if (this.packetHead == null) {
        sb.append("null");
      } else {
        sb.append(this.packetHead);
      }
      first = false;
    }
    if (isSetPacketBody()) {
      if (!first) sb.append(", ");
      sb.append("packetBody:");
      if (this.packetBody == null) {
        sb.append("null");
      } else {
        sb.append(this.packetBody);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
    if (packetHead != null) {
      packetHead.validate();
    }
    if (packetBody != null) {
      packetBody.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PacketStandardSchemeFactory implements SchemeFactory {
    public PacketStandardScheme getScheme() {
      return new PacketStandardScheme();
    }
  }

  private static class PacketStandardScheme extends StandardScheme<Packet> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Packet struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // PACKET_HEAD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.packetHead = new PacketHead();
              struct.packetHead.read(iprot);
              struct.setPacketHeadIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PACKET_BODY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.packetBody = new PacketBody();
              struct.packetBody.read(iprot);
              struct.setPacketBodyIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Packet struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.packetHead != null) {
        if (struct.isSetPacketHead()) {
          oprot.writeFieldBegin(PACKET_HEAD_FIELD_DESC);
          struct.packetHead.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.packetBody != null) {
        if (struct.isSetPacketBody()) {
          oprot.writeFieldBegin(PACKET_BODY_FIELD_DESC);
          struct.packetBody.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PacketTupleSchemeFactory implements SchemeFactory {
    public PacketTupleScheme getScheme() {
      return new PacketTupleScheme();
    }
  }

  private static class PacketTupleScheme extends TupleScheme<Packet> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Packet struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPacketHead()) {
        optionals.set(0);
      }
      if (struct.isSetPacketBody()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetPacketHead()) {
        struct.packetHead.write(oprot);
      }
      if (struct.isSetPacketBody()) {
        struct.packetBody.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Packet struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.packetHead = new PacketHead();
        struct.packetHead.read(iprot);
        struct.setPacketHeadIsSet(true);
      }
      if (incoming.get(1)) {
        struct.packetBody = new PacketBody();
        struct.packetBody.read(iprot);
        struct.setPacketBodyIsSet(true);
      }
    }
  }

}

