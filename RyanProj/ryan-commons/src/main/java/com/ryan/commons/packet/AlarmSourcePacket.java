/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ryan.commons.packet;

import org.apache.thrift.TException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.*;

/**
 * 报警源信息
 */
public class AlarmSourcePacket implements org.apache.thrift.TBase<AlarmSourcePacket, AlarmSourcePacket._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AlarmSourcePacket");

  private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ROUTE_LST_FIELD_DESC = new org.apache.thrift.protocol.TField("routeLst", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AlarmSourcePacketStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AlarmSourcePacketTupleSchemeFactory());
  }

  /**
   * 报警源的IP地址
   */
  public String ip; // optional
  /**
   * 报警源的名称
   */
  public String name; // optional
  /**
   * 报警源信息经过的报警中心
   */
  public List<String> routeLst; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 报警源的IP地址
     */
    IP((short)1, "ip"),
    /**
     * 报警源的名称
     */
    NAME((short)2, "name"),
    /**
     * 报警源信息经过的报警中心
     */
    ROUTE_LST((short)3, "routeLst");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IP
          return IP;
        case 2: // NAME
          return NAME;
        case 3: // ROUTE_LST
          return ROUTE_LST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.IP, _Fields.NAME, _Fields.ROUTE_LST};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROUTE_LST, new org.apache.thrift.meta_data.FieldMetaData("routeLst", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AlarmSourcePacket.class, metaDataMap);
  }

  public AlarmSourcePacket() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AlarmSourcePacket(AlarmSourcePacket other) {
    if (other.isSetIp()) {
      this.ip = other.ip;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetRouteLst()) {
      List<String> __this__routeLst = new ArrayList<String>();
      for (String other_element : other.routeLst) {
        __this__routeLst.add(other_element);
      }
      this.routeLst = __this__routeLst;
    }
  }

  public AlarmSourcePacket deepCopy() {
    return new AlarmSourcePacket(this);
  }

  @Override
  public void clear() {
    this.ip = null;
    this.name = null;
    this.routeLst = null;
  }

  /**
   * 报警源的IP地址
   */
  public String getIp() {
    return this.ip;
  }

  /**
   * 报警源的IP地址
   */
  public AlarmSourcePacket setIp(String ip) {
    this.ip = ip;
    return this;
  }

  public void unsetIp() {
    this.ip = null;
  }

  /** Returns true if field ip is set (has been assigned a value) and false otherwise */
  public boolean isSetIp() {
    return this.ip != null;
  }

  public void setIpIsSet(boolean value) {
    if (!value) {
      this.ip = null;
    }
  }

  /**
   * 报警源的名称
   */
  public String getName() {
    return this.name;
  }

  /**
   * 报警源的名称
   */
  public AlarmSourcePacket setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getRouteLstSize() {
    return (this.routeLst == null) ? 0 : this.routeLst.size();
  }

  public java.util.Iterator<String> getRouteLstIterator() {
    return (this.routeLst == null) ? null : this.routeLst.iterator();
  }

  public void addToRouteLst(String elem) {
    if (this.routeLst == null) {
      this.routeLst = new ArrayList<String>();
    }
    this.routeLst.add(elem);
  }

  /**
   * 报警源信息经过的报警中心
   */
  public List<String> getRouteLst() {
    return this.routeLst;
  }

  /**
   * 报警源信息经过的报警中心
   */
  public AlarmSourcePacket setRouteLst(List<String> routeLst) {
    this.routeLst = routeLst;
    return this;
  }

  public void unsetRouteLst() {
    this.routeLst = null;
  }

  /** Returns true if field routeLst is set (has been assigned a value) and false otherwise */
  public boolean isSetRouteLst() {
    return this.routeLst != null;
  }

  public void setRouteLstIsSet(boolean value) {
    if (!value) {
      this.routeLst = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IP:
      if (value == null) {
        unsetIp();
      } else {
        setIp((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case ROUTE_LST:
      if (value == null) {
        unsetRouteLst();
      } else {
        setRouteLst((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IP:
      return getIp();

    case NAME:
      return getName();

    case ROUTE_LST:
      return getRouteLst();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IP:
      return isSetIp();
    case NAME:
      return isSetName();
    case ROUTE_LST:
      return isSetRouteLst();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AlarmSourcePacket)
      return this.equals((AlarmSourcePacket)that);
    return false;
  }

  public boolean equals(AlarmSourcePacket that) {
    if (that == null)
      return false;

    boolean this_present_ip = true && this.isSetIp();
    boolean that_present_ip = true && that.isSetIp();
    if (this_present_ip || that_present_ip) {
      if (!(this_present_ip && that_present_ip))
        return false;
      if (!this.ip.equals(that.ip))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_routeLst = true && this.isSetRouteLst();
    boolean that_present_routeLst = true && that.isSetRouteLst();
    if (this_present_routeLst || that_present_routeLst) {
      if (!(this_present_routeLst && that_present_routeLst))
        return false;
      if (!this.routeLst.equals(that.routeLst))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(AlarmSourcePacket other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    AlarmSourcePacket typedOther = (AlarmSourcePacket)other;

    lastComparison = Boolean.valueOf(isSetIp()).compareTo(typedOther.isSetIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, typedOther.ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRouteLst()).compareTo(typedOther.isSetRouteLst());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRouteLst()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.routeLst, typedOther.routeLst);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AlarmSourcePacket(");
    boolean first = true;

    if (isSetIp()) {
      sb.append("ip:");
      if (this.ip == null) {
        sb.append("null");
      } else {
        sb.append(this.ip);
      }
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetRouteLst()) {
      if (!first) sb.append(", ");
      sb.append("routeLst:");
      if (this.routeLst == null) {
        sb.append("null");
      } else {
        sb.append(this.routeLst);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AlarmSourcePacketStandardSchemeFactory implements SchemeFactory {
    public AlarmSourcePacketStandardScheme getScheme() {
      return new AlarmSourcePacketStandardScheme();
    }
  }

  private static class AlarmSourcePacketStandardScheme extends StandardScheme<AlarmSourcePacket> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AlarmSourcePacket struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ip = iprot.readString();
              struct.setIpIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ROUTE_LST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.routeLst = new ArrayList<String>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  String _elem2; // required
                  _elem2 = iprot.readString();
                  struct.routeLst.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setRouteLstIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AlarmSourcePacket struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ip != null) {
        if (struct.isSetIp()) {
          oprot.writeFieldBegin(IP_FIELD_DESC);
          oprot.writeString(struct.ip);
          oprot.writeFieldEnd();
        }
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.routeLst != null) {
        if (struct.isSetRouteLst()) {
          oprot.writeFieldBegin(ROUTE_LST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.routeLst.size()));
            for (String _iter3 : struct.routeLst)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AlarmSourcePacketTupleSchemeFactory implements SchemeFactory {
    public AlarmSourcePacketTupleScheme getScheme() {
      return new AlarmSourcePacketTupleScheme();
    }
  }

  private static class AlarmSourcePacketTupleScheme extends TupleScheme<AlarmSourcePacket> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AlarmSourcePacket struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetIp()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetRouteLst()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetIp()) {
        oprot.writeString(struct.ip);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetRouteLst()) {
        {
          oprot.writeI32(struct.routeLst.size());
          for (String _iter4 : struct.routeLst)
          {
            oprot.writeString(_iter4);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AlarmSourcePacket struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.ip = iprot.readString();
        struct.setIpIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.routeLst = new ArrayList<String>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            String _elem7; // required
            _elem7 = iprot.readString();
            struct.routeLst.add(_elem7);
          }
        }
        struct.setRouteLstIsSet(true);
      }
    }
  }

}

